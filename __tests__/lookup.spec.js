const { Mocker, Jester } = require('./utils');

Jester('5 | :baseUrl routes', ['5.1 | should return status code 404 when a bad base url is used', Mocker.URL.baseUrl.invalid, 404, Mocker.NotFound], ['5.2 | should return status code 200 and the campaign when a valid baseUrl is used', Mocker.URL.baseUrl.valid.current.noFallback, 200, Mocker.SanitizeCampaign(Mocker.Campaigns.space)], ['5.3 | should return status code 200 and the campaign when a valid baseUrl with a fb is used', Mocker.URL.baseUrl.valid.current.fallback, 200, Mocker.SanitizeCampaign(Mocker.Campaigns.marg)], ['5.4 | should return status code 404 when a valid baseUrl for a closed campaign is used', Mocker.URL.baseUrl.valid.past, 404, Mocker.NotFound], ["5.5 | should return status code 404 when a valid baseUrl for a campaign that hasn't opened yet is used", Mocker.URL.baseUrl.valid.future, 404, Mocker.NotFound]);

Jester('6 | :baseUrl/:code routes', ['6.1 | should return code 404 for invalid base url and invalid code', Mocker.URL.baseUrl.code.invalid.invalid, 404, Mocker.NotFound], ['6.2 | should return code 404 for invalid base url and valid code', Mocker.URL.baseUrl.code.invalid.valid, 404, Mocker.NotFound], ['6.3 | should return code 200 and fallback resource for a valid base url with fb and expired code', Mocker.URL.baseUrl.code.valid.expired.fallback, 200, Mocker.Resources.marg_fallback.resource], ['6.4 | should return code 200 and fallback resource for a valid base url with fb and an inactive code', Mocker.URL.baseUrl.code.valid.inactive.fallback, 200, Mocker.Resources.fant_fallback.resource], ['6.5 | should return code 200 and fallback resource for a valid base url with fb and an invalid code', Mocker.URL.baseUrl.code.valid.invalid.fallback, 200, Mocker.Resources.marg_fallback.resource], ['6.6 | should return code 200 and the target resource for a valid base url with fb and a valid code', Mocker.URL.baseUrl.code.valid.current.fallback, 200, Mocker.Resources.gaze.resource], ['6.7 | should return code 200 and sanitized campaign for a valid base url and an expired code', Mocker.URL.baseUrl.code.valid.expired.noFallback, 200, Mocker.SanitizeCampaign(Mocker.Campaigns.space)], ['6.8 | should return code 200 and sanitized campaign for a valid base url and an inactive code', Mocker.URL.baseUrl.code.valid.inactive.noFallback, 200, Mocker.SanitizeCampaign(Mocker.Campaigns.space)], ['6.9 | should return code 200 and sanitized campaign for a valid base url and an invalid code', Mocker.URL.baseUrl.code.valid.invalid.noFallback, 200, Mocker.SanitizeCampaign(Mocker.Campaigns.war)], ['6.10 | should return code 200 and the target resource for a valid code', Mocker.URL.baseUrl.code.valid.current.noFallback, 200, Mocker.Resources.teller.resource]);
